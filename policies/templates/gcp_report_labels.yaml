# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: templates.gatekeeper.sh/v1alpha1
kind: ConstraintTemplate
metadata:
  name: gcp-report-labels-v1
spec:
  crd:
    spec:
      names:
        kind: GCPReportLabelConstraintV1
      validation:
        openAPIV3Schema: 
          properties: {}
  targets:
    validation.gcp.forsetisecurity.org:
      rego: | #INLINE("validator/report_labels.rego")
       #
       # Copyright 2020 Google LLC
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #      http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       #
       
       package templates.gcp.GCPReportLabelConstraintV1
       
       import data.validator.gcp.lib as lib
       
       deny[{
       	"msg": message,
       	"details": metadata,
       }] {
       	constraint := input.constraint
       	lib.get_constraint_params(constraint, params)
       	asset := input.asset
       
       	# test if we have a valid resource
       	resource := asset.resource.data
       
       	default_resource_types := {
       		"cloudresourcemanager.googleapis.com/Project",
       		"storage.googleapis.com/Bucket",
       		"compute.googleapis.com/Instance",
       		"compute.googleapis.com/Image",
       		"compute.googleapis.com/Disk",
       		"compute.googleapis.com/Snapshot",
       		"bigtableadmin.googleapis.com/Instance",
       		"sqladmin.googleapis.com/Instance",
       		"dataproc.googleapis.com/Job",
       		"dataproc.googleapis.com/Cluster",
       		"container.googleapis.com/Cluster",
       		"bigquery.googleapis.com/Dataset",
       		"bigquery.googleapis.com/Table",
       	}
       
       	non_standard_types := {"sqladmin.googleapis.com/Instance", "container.googleapis.com/Cluster"}
       
       	resource_labels := get_labels(asset, non_standard_types)
       	label_value := resource_labels[label_key]
       
       	message := sprintf("%v", [asset.asset_type])
       	metadata := {"key": label_key, "value": label_value}
       }
       
       # get_labels for cloudsql instances
       get_labels(asset, non_standard_types) = resource_labels {
       	# check if we have a non-standard type
       	asset.asset_type == non_standard_types[_]
       	asset.asset_type == "sqladmin.googleapis.com/Instance"
       	resource := asset.resource.data.settings
       	resource_labels := lib.get_default(resource, "userLabels", {})
       }
       
       # get_labels for gke cluster
       get_labels(asset, non_standard_types) = resource_labels {
       	# check if we have a non-standard type
       	asset.asset_type == non_standard_types[_]
       	asset.asset_type == "container.googleapis.com/Cluster"
       	resource := asset.resource.data
       	resource_labels := lib.get_default(resource, "resourceLabels", {})
       }
       
       # get_labels for most resources (not non-standard resources)
       # this defaults to asset.resource.data.labels
       get_labels(asset, non_standard_types) = resource_labels {
       	asset_type := asset.asset_type
       	not non_standard_types[asset_type]
       	resource := asset.resource.data
       	resource_labels := lib.get_default(resource, "labels", {})
       }
       #ENDINLINE